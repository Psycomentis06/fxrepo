version: "3.8"
services:
  fx-storage:
    build:
      dockerfile: "dockerfile"
      context: "storage"
    environment:
      # S3 config
      # local dev keys
      - S3_ACCESS_KEY=5MfxOFuj0zKwlLnd5sJ8
      - S3_SECRET_KEY=BUMmJxjMn2mFMw8YkZkK9lS2Zj73Vqd3vD3UQAkT
      - S3_ENDPOINT=fx-minio-container:9000
      - S3_SSL=false
      # Username and password used to authenticate every request
      - USERNAME=user
      - PASSWORD=user
      # Gin mode
      - GIN_MODE=debug
    ports:
      - "9055:8080"
    networks:
      - kafka-network
      - minio-network
      - preprocessing-storage-network
    volumes:
      - "./storage:/usr/src/app"
  fx-minio:
    image: minio/minio
    container_name: fx-minio-container
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data-volume:/data
    networks:
      - minio-network
  fx-kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
    networks:
      - kafka-network
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@fx-kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
  #  fx-zookeeper:
  #    image: ubuntu/zookeeper
  #    container_name: fx-zookeeper-container
  #    networks:
  #      - zookeeper-network
  #    ports:
  #      - ":2181"
  #  fx-apache_kafka:
  #    image: ubuntu/kafka
  #    container_name: fx-apache_kafka-container
  #    networks:
  #      - zookeeper-network
  #      - kafka-network
  #    environment:
  #      - ZOOKEEPER_HOST=fx-zookeeper-container
  #      - ZOOKEEPER_PORT=2181
  #      - KAFKA_ADVERTISED_HOST_NAME=fx-apache_kafka-container
  #      - KAFKA_ADVERTISED_PORT=9092
  #    ports:
  #      - "9092:9092"
  #    depends_on:
  #      - fx-zookeeper
  #  zookeeper:
  #    image: confluentinc/cp-zookeeper:7.3.0
  #    hostname: zookeeper
  #    container_name: zookeeper
  #    environment:
  #      ZOOKEEPER_CLIENT_PORT: 2181
  #      ZOOKEEPER_TICK_TIME: 2000
  #  broker:
  #    image: confluentinc/cp-kafka:7.3.0
  #    container_name: broker
  #    ports:
  #      - "9092:9092"
  #    depends_on:
  #      - zookeeper
  #    environment:
  #      KAFKA_BROKER_ID: 1
  #      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
  #      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
  #      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  fx-redis:
    # For dev we are using only one redis instance
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      redis-network:
  fx-preprocessing:
    build:
      context: "./preprocessing"
      dockerfile: "Dockerfile"
    environment:
      - PROD_ENV=false
      - REDIS_HOST=fx-redis
      - REDIS_PORT=6379
      - KAFKA_HOST=fx-kafka
      - KAFKA_GROUP_ID=main_service
      - KAFKA_AUTO_OFFSET_RESET=earliest
      - STORAGE_ROOT_DIR=${HOME}/fx-repo-storage/preprocessing-service
      - FX_STORAGE_USER=user
      - FX_STORAGE_PASS=user
      - FX_STORAGE_INNER_HOST=fx-storage # Hostname in the Docker network
      - FX_STORAGE_OUTER_HOST=localhost # Used to create the public service url that can be used to get the files
      - FX_STORAGE_PORT=8080
      - FX_STORAGE_SSL=false
    volumes:
      - "./preprocessing:/usr/src/app"
      - "${HOME}/fx-repo-storage/preprocessing-service/${HOME}/fx-repo-storage/preprocessing-service"
    ports:
      - "9056:5000"
    networks:
      - kafka-network
      - redis-network
      - preprocessing-storage-network
  fx-main-service:
    build:
      context: "./fx-repo-main"
      dockerfile: "Dockerfile"
    environment:
      - MAIN_DB_HOST=fx-postgresql:5432
      - MAIN_DB_USERNAME=postgres
      - MAIN_DB_PASSWORD=postgres
      - MAIN_DB_CONNECTION_STRING=jdbc:postgresql://fx-postgresql:5432/fx_repo_main
      - STORAGE_ROOT_DIR=${HOME}/fx-repo-storage
      - TYPESENSE_API_KEY=dev_api_key_123
      - TYPESENSE_HOST=fx-typesense
      - TYPESENSE_PORT=8108
      - TYPESENSE_PROTOCOL=http
    volumes:
      - "./fx-repo-main:/usr/src/application"
      - "${HOME}/fx-repo-storage:${HOME}/fx-repo-storage"
    ports:
      - "9057:8000"
    networks:
      - main-service-network
      - postgresql-network
      - redis-network
      - kafka-network
      - keycloak-network
      - typesense-network
  fx-postgresql:
    image: postgres:15-bookworm
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=fx_repo_main
    ports:
      - "5432:5432"
    networks:
      - postgresql-network
      - keycloak-network
  #  fx-keycloak:
  #    build:
  #      context: "keycloak"
  #      dockerfile: "Dockerfile"
  #    environment:
  #      - KC_DB=postgres
  #      - KC_DB_URL=fx-postgresql:5432
  #      - KC_DB_USERNAME=postgres
  #      - KC_DB_PASSWORD=postgres
  #      - KC_HOSTNAME=localhost
  #      - KC_HEALTH_ENABLED=true
  #      - KC_METRICS_ENABLED=true
  #      - KEYCLOAK_ADMIN=admin
  #      - KEYCLOAK_ADMIN_PASSWORD=admin
  #    ports:
  #      - "8443:8443"
  #    networks:
  #      keycloak-network:
  fx-typesense:
    image: typesense/typesense:0.25.1
    restart: on-failure
    ports:
      - "8108:8108"
    volumes:
      - typesense-data-volume:/data
    environment:
      TYPESENSE_DATA_DIR: /data
      TYPESENSE_API_KEY: dev_api_key_123
    networks:
      - typesense-network




volumes:
  minio-data-volume:
  typesense-data-volume:
networks:
  zookeeper-network:
  kafka-network:
  minio-network:
  redis-network:
  preprocessing-storage-network:
  postgresql-network:
  main-service-network:
  keycloak-network:
  typesense-network: